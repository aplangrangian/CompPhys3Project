#imports
 import numpy as np
 from scipy.misc import derivative
 #%%
 A = np.random.randint(1,10+1,size = (3,3))
 B = np.random.randint(1,10+1, size = (1,3))
 #%%
 def GaussianElim(A,B):
     A = np.insert(A,np.shape(A)[0],B,1)
     for k in range(np.shape(A)[0]):
         pivot(A,k)
         for i in range(k+1,np.shape(A)[0]):
             A[i] = [A[i][j] - A[k][j]/(A[k][k])*A[i][k] for j in range(np.shape(A)[0]+1)]
     x1 = [0]*len(A)
     summed=0
     for k in range(np.shape(A)[0]-1, -1,-1):
         for i in range(i,np.shape(A)[0]):
             summed += A[k,i]*x1[i]
             x1[k] = (A[k,np.shape(A)[0]]/(A[k,k])) - summed/((A[k,k]))
     return x1

 #%% Pivoting function before Eqn 41 ish
 def pivot(A,k):
     Amax = A[k][k]
     for i in range(k+1,np.shape(A)[0]):
         if A[i][k] > Amax:
             A[[i,k],:] = A[[k,i],:]
 #%%
 ELIMINATED_A = GaussianElim(A,B)
 #%%
 x1 = np.zeros(np.shape(A)[0])
 #%%
 xN = ELIMINATED_A[np.shape(A)[0]-1,np.shape(ELIMINATED_A)[0]]/(ELIMINATED_A[np.shape(A)[0]-1,np.shape(A)[0]-1])
 #%%
 x1[-1] = xN
 #%%
 print(np.matmul(A,x1))
             A[k],A[i] = A[i], A[k]

 #%% Gaussian Elim function
 def GaussianEliminationWPivot(A):
     # Elimination Eqn 43 for general
     n = np.shape(A)[0] # to make the length neater (N)
     n1 = np.shape(A)[1] #width (N+1)  now we have N x N+1 matrix as in 42 or 40
     for i in range(n):
         pivot(A, i) #pivots for each set of cols 
         for j in range(i+1, n): 
             A[j] = [A[j][k] - A[i][k]*A[j][i]/A[i][i] for k in range(n1)] #elim

     #backwards substitution 
     x = [0]*np.shape(A)[0] #list of N zeros
     for i in range(np.shape(A)[0]-1, -1, -1):
         summed=0
         for j in range(i, np.shape(A)[0]):
             summed += A[i][j] * x[j]  #summing over each iteration
             x[i] = (A[i][np.shape(A)[0]] - summed) / A[i][i] #eqn 37
     return x #returns x values Ie sols to matrix eq.
 #%% Matrix Def
 A= [[8,2,8,10],[6,10,9,1],[6,4,5,1]] #needs to be dtype == list, sample matrix
 print(GaussianEliminationWPivot(A))

 #%% Testing
 testA = [[8,2,8],[6,10,9],[6,4,5]] 
 testB = GaussianEliminationWPivot(A)

 print(np.matmul(ELIMINATED_A[:,0:3],x1))
 print(np.matmul(testA,testB))
 
 
 
 #%%


#Functions
def func(q):
    return (1+q)**(-2)

def qfunc(x):
    return (1+x)/(1-x)

def mesh(Mesh_Size):
    X = np.polynomial.legendre.leggauss(Mesh_Size)
    return X

def updatedmesh(Mesh_Size):
    mesh=mesh(Mesh_Size)
    mesh[1]=2*mesh[1]/(1-mesh[0])^2
    return mesh

def GaussInteg(X,N,K):
    sum=0
    for j in range(0,N):
        q=qfunc(X[j])
        sum+= K[j]*func(q)*derivative(qfunc,X[j], dx=1e-6)
        print(sum)
    return sum

#Variables
N=100
F=np.zeros((N,1))

#Body of Code    
Mesh_asbsesca = updatedmesh(N)[0]
Mesh_weights = updatedmesh(N)[1]

F=GaussInteg(Mesh_asbsesca,N,Mesh_weights)


#%%

def Vi(r,i):
    Vr=1438.72
    mur=3.11
    mua=1.55
    conversion=41.47 #MeVfm^2
    if (i==1):
        Va=513.968
    elif (i==3):
        Va=626.885
    V=2/np.pi*1/conversion*(Vr*np.exp(-mur*r)/r-Va*np.exp(-mua*r)/r)
    return V

#%%

def U(N):
    w=updatedmesh[1]
    q=updatedmesh[0]
    for i,j in zip(range(N),range(N)):
      sum=0
      for l in range(N):
          sum+=w[l]*Sin(q[i]*r[l])/q[i]*V(r[l])*Sin(q[j]*r[l])/q[j]
