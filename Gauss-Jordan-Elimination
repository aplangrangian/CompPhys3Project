#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct 29 13:28:41 2020

@author: alexlange
"""

import numpy as np
#%%
A = np.random.randint(1,10+1,size = (3,3))
B = np.random.randint(1,10+1, size = (1,3))
#%%
def GaussianElim(A,B):
    A = np.insert(A,np.shape(A)[0],B,1)
    for k in range(np.shape(A)[0]):
        pivot(A,k)
        for i in range(k+1,np.shape(A)[0]):
            A[i] = [A[i][j] - A[k][j]/(A[k][k])*A[i][k] for j in range(np.shape(A)[0]+1)]
    x1 = [0]*len(A)
    summed=0
    for k in range(np.shape(A)[0]-1, -1,-1):
        for i in range(i,np.shape(A)[0]):
            summed += A[k,i]*x1[i]
            x1[k] = (A[k,np.shape(A)[0]]/(A[k,k])) - summed/((A[k,k]))
    return x1

def pivot(A,k):
    Amax = A[k][k]
    for i in range(k+1,np.shape(A)[0]):
        if A[i][k] > Amax:
            A[[i,k],:] = A[[k,i],:]
#%%
ELIMINATED_A = GaussianElim(A,B)
#%%
x1 = np.zeros(np.shape(A)[0])
#%%
xN = ELIMINATED_A[np.shape(A)[0]-1,np.shape(ELIMINATED_A)[0]]/(ELIMINATED_A[np.shape(A)[0]-1,np.shape(A)[0]-1])
#%%
x1[-1] = xN
#%%
print(np.matmul(A,x1))

print(np.matmul(ELIMINATED_A[:,0:3],x1))
