#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct 29 13:28:41 2020

@author: alexlange
"""
#imports
import numpy as np
#%% Pivoting function before Eqn 41 ish
def pivot(A,k):
    Amax = A[k][k]
    for i in range(k+1,np.shape(A)[0]):
        dummy=0
        if A[i][k] > Amax:
            dummy = A[k]
            Amax = A[i][k]
            A[k],A[i] = A[i], dummy


#%% Gaussian Elim function
def GaussianEliminationWPivot(A):
    # Elimination Eqn 43 for general
    n = np.shape(A)[0] # to make the length neater (N)
    n1 = np.shape(A)[1] #width (N+1)  now we have N x N+1 matrix as in 42 or 40
    for i in range(n):
        pivot(A, i) #pivots for each set of cols 
        for j in range(i+1, n): 
            A[j] = [A[j][k] - A[i][k]*A[j][i]/A[i][i] for k in range(n1)] #elim
            
    #backwards substitution 
    x = [0]*np.shape(A)[0] #list of N zeros
    for i in range(np.shape(A)[0]-1, -1, -1):
        summed=0
        for j in range(i, np.shape(A)[0]):
            summed += A[i][j] * x[j]  #summing over each iteration
            x[i] = (A[i][np.shape(A)[0]] - summed) / A[i][i] #eqn 37
    return x #returns x values Ie sols to matrix eq.

#%%
A = np.random.uniform(0,10, size = (100,100))
B = np.random.uniform(0,10, size = (1,100))
#%%
def ToList(A,B):
    a=A.tolist()
    b=list(B)
    n=len(a)
    for i in range(0,n):
        a[i].append(b[0][i])
        
    return a

A_List=ToList(A,B)   
sols = GaussianEliminationWPivot(A_List)
print(np.matmul(A,sols))
print(abs(np.matmul(A,sols) - B)<1e-12)
#%%  Additional testing to fix accuracy. Runs into a bunch of problems for some reason
#C = np.column_stack((A,B.T))
#A_List = GaussianEliminationWPivot(C)   
#sols = GaussianEliminationWPivot(A_List)
