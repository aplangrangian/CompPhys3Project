#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 17 14:58:23 2020

@author: alexlange
"""
import numpy as np
from scipy.misc import derivative
from matplotlib import pyplot as plt
from mpl_toolkits import mplot3d
#%% Mesh points and weights
Position_Mesh_Size = 100
def weight_func(Mesh_Size):
    x = np.polynomial.legendre.leggauss(Mesh_Size)
    return x 

Position_Mesh_Abscissa = weight_func(Position_Mesh_Size)[0]
Position_Mesh_Weights = weight_func(Position_Mesh_Size)[1]
#%%
Momentum_Mesh_Size = 40
def weight_func(Mesh_Size):
    x = np.polynomial.legendre.leggauss(Mesh_Size)
    return x 

Momentum_Mesh_Abscissa = weight_func(Momentum_Mesh_Size)[0]
Momentum_Mesh_Weights = weight_func(Momentum_Mesh_Size)[1]
#%% POTENTIAL params
VR1 = 1438.720/41.47;
VA1 = 513.968/41.47;
VR3 = 1438.720/41.47;
VA3 = 626.885/41.47;
mur = 3.110;
mua = 1.550;
VhatR1 = 2*VR1/np.pi
VhatA1 = 2*VA1/np.pi
VhatR3 = 2*VR3/np.pi
VhatA3 = 2*VA3/np.pi
#%% potential function def
def MT1(r):
    return VhatR1*np.e**(-mur*r)/r - VhatA1*np.e**(-mua*r)/r
def MT3(r):
    return VhatR3*np.e**(-mur*r)/r - VhatA3*np.e**(-mua*r)/r
def GaussInteg(X,N,K):
    sum=0
    for j in range(0,N):
        q=qfunc(X[j])
#        w = wfunc(K)
        sum+= K[j]*func(q)*derivative(qfunc,X[j], dx=1e-6)
    return sum

def func(q):
    return (1+q)**(-4)

def qfunc(x):
    return 2*(1+x)/(1-x)

#def wfunc(w):
#    return 2*2*
Momentum_Transformed_Mesh_Abscissa = 2*(1+Momentum_Mesh_Abscissa)/(1-Momentum_Mesh_Abscissa)
Position_Transformed_Mesh_Abscissa = 2*(1+Position_Mesh_Abscissa)/(1-Position_Mesh_Abscissa)
Momentum_Transformed_Mesh_Weights = 2 * 2 *(Momentum_Mesh_Weights)/(1-Momentum_Mesh_Abscissa)**2

F = GaussInteg(Position_Mesh_Abscissa,Position_Mesh_Size,Position_Mesh_Weights)
G = GaussInteg(Momentum_Mesh_Abscissa,Momentum_Mesh_Size,Momentum_Mesh_Weights)
#%% 
#axes = plt.gca()
#axes.set_xlim([0,4])
#axes.set_ylim([-2,5])
#r = np.arange(0,4,.01)
#plt.plot(r,MT1(r))
#plt.plot(r,MT3(r))
#plt.show()
#%%
def Potential1(Position_Mesh_Abscissa,Position_Mesh_Weights,Momentum_Mesh_Abscissa):
    fuck = 0
    Potential = np.zeros((len(Momentum_Mesh_Abscissa),len(Momentum_Mesh_Abscissa)))
    for i in range(np.shape(Potential)[0]):
        fuck = 0
        for j in range(np.shape(Potential)[1]):
            fuck = 0
            for n in range(len(Momentum_Mesh_Abscissa)):
                if i == 0 and j ==0: #W_rl * r_l^2 * V(r))
                    fuck+= (Position_Mesh_Weights[n]*Position_Mesh_Abscissa[n] 
                    *Position_Mesh_Abscissa[n]*MT1(Position_Mesh_Abscissa[n]))
                elif i ==0 and j!=0: # W_rl * r_l *sin(r_l * p(j))/p(j)
                    fuck+= (Position_Mesh_Weights[n]*Position_Mesh_Abscissa[n]*np.sin(Momentum_Mesh_Abscissa[j]
                    *Position_Mesh_Abscissa[n])*MT1(Position_Mesh_Abscissa[n])/(Momentum_Mesh_Abscissa[j]))
                elif i !=0 and j==0: # W_rl * r_l *sin(r_l * p(i))/p(i)
                    fuck+= (Position_Mesh_Weights[n]*Position_Mesh_Abscissa[n]*np.sin(Momentum_Mesh_Abscissa[i]
                    *Position_Mesh_Abscissa[n])*MT1(Position_Mesh_Abscissa[n])/(Momentum_Mesh_Abscissa[i]))
                else:               # W_rl * sin(r_l * p(i))/p(i) sin(r_l * p(j))/p(j)
                    fuck+= (Position_Mesh_Weights[n]*np.sin(Momentum_Mesh_Abscissa[i]*Position_Mesh_Abscissa[n])
                    *np.sin(Momentum_Mesh_Abscissa[j]*Position_Mesh_Abscissa[n])*MT1(Position_Mesh_Abscissa[n])
                    /(Momentum_Mesh_Abscissa[j]*Momentum_Mesh_Abscissa[i]))

            Potential[i][j] = fuck
    return Potential
def Potential3(Position_Mesh_Abscissa,Position_Mesh_Weights,Momentum_Mesh_Abscissa):
    fuck = 0
    Potential = np.zeros((len(Momentum_Mesh_Abscissa),len(Momentum_Mesh_Abscissa)))
    for i in range(np.shape(Potential)[0]):
        fuck = 0
        for j in range(np.shape(Potential)[1]):
            fuck = 0
            for n in range(len(Momentum_Mesh_Abscissa)):
                if i == 0 and j ==0: #W_rl * r_l^2 * V(r))
                    fuck+= (Position_Mesh_Weights[n]*Position_Mesh_Abscissa[n] 
                    *Position_Mesh_Abscissa[n]*MT3(Position_Mesh_Abscissa[n]))
                elif i ==0 and j!=0: # W_rl * r_l *sin(r_l * p(j))/p(j)
                    fuck+= (Position_Mesh_Weights[n]*Position_Mesh_Abscissa[n]*np.sin(Momentum_Mesh_Abscissa[j]
                    *Position_Mesh_Abscissa[n])*MT3(Position_Mesh_Abscissa[n])/(Momentum_Mesh_Abscissa[j]))
                elif i !=0 and j==0: # W_rl * r_l *sin(r_l * p(i))/p(i)
                    fuck+= (Position_Mesh_Weights[n]*Position_Mesh_Abscissa[n]*np.sin(Momentum_Mesh_Abscissa[i]
                    *Position_Mesh_Abscissa[n])*MT3(Position_Mesh_Abscissa[n])/(Momentum_Mesh_Abscissa[i]))
                else:               # W_rl * sin(r_l * p(i))/p(i) sin(r_l * p(j))/p(j)
                    fuck+= (Position_Mesh_Weights[n]*np.sin(Momentum_Mesh_Abscissa[i]*Position_Mesh_Abscissa[n])
                    *np.sin(Momentum_Mesh_Abscissa[j]*Position_Mesh_Abscissa[n])*MT3(Position_Mesh_Abscissa[n])
                    /(Momentum_Mesh_Abscissa[j]*Momentum_Mesh_Abscissa[i]))

            Potential[i][j] = fuck
    return Potential
potential1 = Potential1(Position_Transformed_Mesh_Abscissa,Momentum_Transformed_Mesh_Weights,Momentum_Transformed_Mesh_Abscissa) 
potential3 = Potential1(Position_Transformed_Mesh_Abscissa,Momentum_Transformed_Mesh_Weights,Momentum_Transformed_Mesh_Abscissa) 
    #%%
X1, Y1 = np.meshgrid(Momentum_Transformed_Mesh_Abscissa[0:80],Momentum_Transformed_Mesh_Abscissa[0:80])
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.set_title('fugma')
X3, Y3 = np.meshgrid(Momentum_Transformed_Mesh_Abscissa[0:80],Momentum_Transformed_Mesh_Abscissa[0:80])
ax.plot_wireframe(X1, Y1, potential1[0:80,0:80], color='green')

ax.plot_wireframe(X3, Y3, potential3[0:80,0:80], color='red')


plt.show()
